package com.dsi.SOA;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;

import jakarta.transaction.Transactional;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

@Path("/service2")
public class WebService2 {
	
	@Autowired
	private DemandeRepository demandeRepository ;
	
	@Autowired
	private VoyageRepository voyageRepository ;
	
	@Autowired
	private VoyageurRepository voyageurRepository ;
	
	
	@GET
	@Path("/Demandes")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Demande> GetDemande() {
		List<Demande> demandes=demandeRepository.findAll();
		return demandes;
		//return Response.status(Response.Status.OK).entity(demandes).build();
		
	}
	
	
	@POST
	@Path("/addDemande")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response addDemande(Demande demande) {
	    // Save the new "voyageur" using the repository
		//if (demande.getId())
		Demande SavedDemande = demandeRepository.save(demande);
		
	    // Return a response indicating success
	    return Response.status(Response.Status.CREATED)
	                   .entity(SavedDemande)
	                   .build();
	}
	
	
	@PUT
	@Path("/validerDemande/vol/{vol}/voyageur/{numV}/demande/{id}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response validerDemande(@PathParam("vol") Integer vol,@PathParam("numV") Integer Nvoyageur,@PathParam("id") Long id) {
		Optional<Voyageur> Voyageur = voyageurRepository.findById(Nvoyageur);
		//System.out.println(Voyageur.toString());
		
	    // Check if Voyageur exists
	    if (Voyageur.isEmpty()) {
	        return Response.status(Response.Status.NOT_FOUND)
	                       .entity("Voyageur not found")
	                       .build();
	    }
	    
		Optional<Demande> Demande=demandeRepository.findById(id);
	    // Check if Demande exists
	    if (Demande.isEmpty()) {
	        return Response.status(Response.Status.NOT_FOUND)
	                       .entity("Demande not found")
	                       .build();
	    }
		
	    Voyageur voyageur = Voyageur.get();
	    Demande demandeToUpdate = Demande.get();
	    
	    // Iterate through the voyages of the voyageur
	    List<Voyage> voyages = voyageur.getVoyages();
	    
	    boolean voyageFound = false;
	    for (Voyage voyage : voyages) {
	        if (voyage.getVol().equals(vol)) {
	        	voyageFound = true;
	            System.out.println("Voyage found: " + voyage.toString());

	            List<Demande> demandes = voyage.getColis();

	            for (Demande demande : demandes) {
	                if (demande.getId().equals(id)) {
	                    demande.setStatut("OK");
	                    demande.setVoyage(voyage);
	                }
	            }

	            voyage.setColis(demandes);
	            voyageRepository.save(voyage);
	            demandeRepository.deleteById(id);

	            // Return updated Demande with status OK
	            return Response.status(Response.Status.OK)
	                           .entity(demandeToUpdate)
	                           .build();
	        }
	    }
	    
	    /*
		if (Voyageur.isPresent()) {
			List<Voyage> Voyages = Voyageur.get().getVoyages();
			Voyages.forEach(v -> {
				if (v.getVol().equals(vol)) {
					Voyage voyage=v;
					System.out.println(v.toString());
					List<Demande> demandes=v.getColis();
					
					demandes.stream()
	                .filter(d -> d.getId().equals(id))
	                .forEach(d -> {
	                    d.setStatut("OK");
	                    d.setVoyage(voyage);
	                });
					
					demandes.forEach(demande -> {
						if (demande.getId().equals(id)) {
							demande.setStatut("OK");
							demande.setVoyage(voyage);
						}
	              
	                });
					if (Demande.isPresent()) {
						voyage.setColis(demandes);
						voyageRepository.save(voyage);
						demandeRepository.deleteById(id);
					}


				}

				
			});
			return Response.status(Response.Status.OK)
					.entity(Demande)
					.build();
		}
		*/
        if (!voyageFound) {
            return Response.status(Response.Status.NOT_FOUND)
                    .entity("Voyage with specified vol not found for this Voyageur")
                    .build();
        }
		return Response.status(Response.Status.NOT_FOUND)
                .entity("Unexpected error during demande validation")
                .build();
	}
	
	
	/*
	@PUT
    @Path("/addDemande/{vol}/voyageur/{numV}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    //@Transactional
    public Response validerDemande(@PathParam("vol") Integer vol, @PathParam("numV") Integer Nvoyageur, List<Demande> demandes) {
        Optional<Voyageur> optionalVoyageur = voyageurRepository.findById(Nvoyageur);

        if (optionalVoyageur.isPresent()) {
            Voyageur voyageur = optionalVoyageur.get();
            Optional<Voyage> optionalVoyage = voyageur.getVoyages().stream()
                    .filter(v -> v.getVol().equals(vol))
                    .findFirst();
            System.out.println(optionalVoyage);

            if (optionalVoyage.isPresent()) {
                Voyage voyage = optionalVoyage.get();
                demandes.forEach(demande -> {
                	demande.setStatut("OK");
                	demande.setVoyage(voyage);
              
                });
                
                List<Demande> savedDemandes = demandeRepository.saveAll(demandes);
                voyage.setColis(savedDemandes);
                voyageRepository.save(voyage);

                return Response.status(Response.Status.OK).entity(savedDemandes).build();
            } else {
                return Response.status(Response.Status.NOT_FOUND).entity("Voyage not found").build();
            }
        }
        return Response.status(Response.Status.NOT_FOUND).entity("Voyageur not found").build();
    }
	*/
	


}
